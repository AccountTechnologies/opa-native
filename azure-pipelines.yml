trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

variables:
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}:
    PKGVER: ${{ variables['Build.SourceBranchName'] }}
  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')) }}:
    PKGVER: '0.0.0-dev'

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macOS-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

steps:

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '6.0.x'
    includePreviewVersions: true

- task: Bash@3
  displayName: Opa Binaries
  inputs:
    filePath: fake.sh
    arguments: run build.fsx -t opa-binaries --single-target
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)
  condition: succeeded()

- task: Bash@3
  displayName: Test
  inputs:
    filePath: fake.sh
    arguments: build --target test
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)
  condition: succeeded()

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '$(System.DefaultWorkingDirectory)/testResults.xml'
    failTaskOnFailedTests: true

- task: Bash@3
  displayName: GitHub Release
  inputs:
    filePath: fake.sh
    arguments: build --target gh-release
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

- task: Bash@3
  displayName: NuGet Release
  inputs:
    filePath: fake.sh
    arguments: build --target nuget-release
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)
    NUGET_KEY: $(NUGET_KEY)
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
